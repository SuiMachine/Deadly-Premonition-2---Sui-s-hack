using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GlobalGameManagersPatcher
{
	class Program
	{
		const string PATH = "DeadlyPremonition2_Data\\globalgamemanagers";
		static readonly byte[] LOOKUP_SIGNATURE = new byte[] { 0x48, 0x6F, 0x72, 0x69, 0x7A, 0x6F, 0x6E, 0x74, 0x61, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCD, 0xCC, 0x4C, 0x3E, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCD, 0xCC, 0x4C, 0x3E, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 };
		static readonly byte[] REPLACEMENT = new byte[] { 0x48, 0x6F, 0x72, 0x69, 0x7A, 0x6F, 0x6E, 0x74, 0x61, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCD, 0xCC, 0x4C, 0x3E, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCD, 0xCC, 0x4C, 0x3E, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


		static void Main(string[] args)
		{
			if(File.Exists(PATH))
			{
				if (LOOKUP_SIGNATURE.Length != REPLACEMENT.Length)
					throw new Exception("What the fuck, can you even copy-paste?!");

				var bytes = File.ReadAllBytes(PATH);
				var find = FindSignature(bytes);
				if(find > 0)
				{
					Console.WriteLine("This program will patch your \"globalgamemanagers\" to read Mouse input. If you experience any problems, a backup file will be created. Do you want to continue (press Y).");
					var key = Console.ReadKey();
					if(key.Key == ConsoleKey.Y)
					{
						Console.WriteLine();
						ReplaceBytes(bytes, find);
					}
					else
					{
						Console.WriteLine();
						Console.WriteLine("Cancelled the operation");
					}
				}
				else
				{
					Console.WriteLine("No signature was found. Are you sure you haven't patched the file already?");
				}
			}
			else
				Console.WriteLine("Couldn't find \"globalgamemanagers\" file. Make sure to place this program inside the game's directory.");

			Console.ReadKey();
		}

		private static void ReplaceBytes(byte[] bytes, int index)
		{
			var folder = Directory.GetParent(PATH).FullName;
			var filename = Path.GetFileNameWithoutExtension(PATH);
			var copyFile = Path.Combine(folder, filename + ".bak");

			if(!File.Exists(copyFile))
			{
				File.Copy(PATH, copyFile);
				Console.WriteLine("Created a backup");
			}
			for (int i=0; i< REPLACEMENT.Length; i++)
			{
				bytes[index + i] = REPLACEMENT[i];
			}

			File.WriteAllBytes(PATH, bytes);
			Console.WriteLine("Patched the file");

		}

		private static int FindSignature(byte[] bytes)
		{
			for(int i=0; i<bytes.Length - LOOKUP_SIGNATURE.Length; i++)
			{
				bool found = true;
				for(int j=0; j< LOOKUP_SIGNATURE.Length; j++)
				{
					if(bytes[i+j] != LOOKUP_SIGNATURE[j])
					{
						found = false;
						break;
					}
				}

				if (found)
					return i;
			}

			return -1;
		}
	}
}
